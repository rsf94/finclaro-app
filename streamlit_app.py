import streamlit as st
import pdfplumber
import tempfile
import requests
from PIL import Image
import matplotlib.pyplot as plt
import re

st.set_page_config(page_title="FinClaro - An√°lisis simple", layout="centered")

logo = Image.open("logo.png")
st.image(logo, width=160)
st.title("FinClaro")
st.subheader("Sube tu estado de cuenta en PDF y recibe observaciones claras")


def generar_prompt(texto):
    return f"""
Eres un asesor financiero. Analiza el siguiente estado de cuenta en espa√±ol. Extrae insights clave y pres√©ntalos en secciones claras y √∫tiles para el usuario.

Tu respuesta debe estar organizada as√≠:

1. **Resumen general**: saldo anterior, saldo actual, pagos, intereses cobrados, pago m√≠nimo.
2. **Observaciones √∫tiles**: uso del cr√©dito, si el usuario pag√≥ total o m√≠nimo, alertas importantes.
3. **Gasto por categor√≠a** (usa estimaci√≥n heur√≠stica si no hay categor√≠as expl√≠citas). Usa estas categor√≠as:
   - üõí Supermercado
   - üçΩÔ∏è Restaurantes
   - ‚õΩ Transporte y gasolina
   - üßæ Servicios
   - ‚úàÔ∏è Viajes
   - üõçÔ∏è Compras personales
   - üí≥ Meses sin intereses
   Da el gasto en pesos por categor√≠a. Ejemplo: Supermercado: $1234.50
4. **Consejos personalizados**: en tono emp√°tico y √∫til.

Es muy importante que no dejes secciones vac√≠as. Si no encuentras informaci√≥n suficiente, ind√≠calo con un mensaje breve.

Texto del estado de cuenta:

<<<
{texto}
>>>
"""


def llamar_deepseek(texto, api_key):
    prompt = generar_prompt(texto)

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    data = {
        "model": "deepseek-chat",
        "messages": [
            {"role": "system", "content": "Eres un asesor financiero experto en cr√©dito personal."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.3
    }

    response = requests.post("https://api.deepseek.com/v1/chat/completions", headers=headers, json=data)

    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        raise Exception(f"Error de DeepSeek: {response.status_code} - {response.text}")


uploaded_file = st.file_uploader("Cargar archivo PDF", type=["pdf"])

if uploaded_file:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
        tmp_file.write(uploaded_file.read())
        tmp_path = tmp_file.name

    st.success("Archivo cargado correctamente ‚úÖ")

    with pdfplumber.open(tmp_path) as pdf:
        all_text = ""
        for page in pdf.pages:
            txt = page.extract_text()
            if txt:
                all_text += txt + "\n"

    if not all_text.strip():
        st.error("No se pudo extraer texto del PDF. ¬øEs escaneado?")
    else:
        with st.spinner("Analizando el estado de cuenta con inteligencia artificial..."):
            try:
                respuesta = llamar_deepseek(all_text, st.secrets["deepseek"]["api_key"])
                st.success("‚úÖ An√°lisis completo")

                # Respuesta cruda para debug
                st.subheader("üßæ Respuesta sin procesar (debug)")
                st.code(respuesta)

                partes = respuesta.split("**")
                for sec in partes:
                    if "Resumen general" in sec:
                        st.subheader("üìä Resumen general")
                        st.markdown(sec.strip())
                    elif "Observaciones √∫tiles" in sec:
                        st.subheader("üîç Observaciones √∫tiles")
                        st.markdown(sec.strip())
                    elif "Gasto por categor√≠a" in sec:
                        st.subheader("üìÇ Gasto por categor√≠a")
                        st.markdown(sec.strip())

                        try:
                            labels = []
                            values = []
                            lines = sec.split("\n")
                            for line in lines:
                                match = re.match(r"(.+):\s*\$([\d,]+\.\d{2})", line)
                                if match:
                                    labels.append(match.group(1).strip())
                                    values.append(float(match.group(2).replace(",", "")))
                            if labels and values:
                                fig, ax = plt.subplots()
                                ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=90)
                                ax.axis("equal")
                                st.pyplot(fig)
                        except Exception:
                            st.warning("No se pudo graficar el gasto por categor√≠a autom√°ticamente.")

                    elif "Consejos personalizados" in sec:
                        st.subheader("üí° Consejos personalizados")
                        st.markdown(sec.strip())

            except Exception as e:
                st.error(f"‚ùå Error al procesar con DeepSeek: {e}")
